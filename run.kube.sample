#!/usr/bin/env bash
#
# A sample build container entry script which can be used by the actual instances
#

ENVIRONMENTS_DIR="environments"
GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
PLATFORM_ENV=${PLATFORM_ENV:-""}
PLATFORM_IMAGE=${PLATFORM_IMAGE:="quay.io/gambol99/kube-coreos"}
PLATFORM_VERSION=${PLATFORM_VERSION:-"latest"}
WORKDIR="/platform"
NC='\e[0m'
YELLOW='\e[0;33m'
RED='\e[0;31m'

usage() {
  cat <<EOF
Usage: $(basename $0) -e <ENVIRONMENT>
  -e|--env ENVIRONMENT    : the envirnoment we are running
  -h|--help               : display this usage menu

EOF
  [[ -n $@ ]] && failed "$@"
}

annonce() {
  (2>/dev/null echo -e "--> $@")
}

failed() {
  (2>/dev/null echo -e "${RED}[error]${NC} $@")
  exit 1
}

# run is responsible for creating the platform container and passing environment
run() {
  /usr/bin/docker run -ti --rm \
    -e USER=${USER} \
    -e GIT_BRANCH="${GIT_BRANCH}" \
    -e PLATFORM_ENV="${PLATFORM_ENV}" \
    -e AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" \
    -e AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION}" \
    -e AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \
    -v ${PWD}/ca:${WORKDIR}/ca \
    -v ${PWD}/environments:${WORKDIR}/environments \
    -v ${PWD}/scripts:${WORKDIR}/scripts \
    -v ${PWD}/scripts/.bashrc:/root/.bashrc \
    -v ${PWD}/scripts/.terraformrc:/root/.terraformrc \
    ${PLATFORM_IMAGE}:${PLATFORM_VERSION}
}

# get_credentials is responsible for retrieving the credentials from the file
get_credentials() {
  [[ -n "${AWS_ACCESS_KEY_ID}"     ]] || AWS_ACCESS_KEY_ID=$(aws configure --profile ${PLATFORM_ENV} get aws_access_key_id)
  [[ -n "${AWS_SECRET_ACCESS_KEY}" ]] || AWS_SECRET_ACCESS_KEY=$(aws configure --profile ${PLATFORM_ENV} get aws_secret_access_key)
  [[ -n "${AWS_DEFAULT_REGION}"    ]] || AWS_DEFAULT_REGION=$(aws configure --profile ${PLATFORM_ENV} get region)
}

# step: get the command line options
while [ $# -gt 0 ]; do
  case $1 in
    -e|--env)   PLATFORM_ENV=$2; shift 2 ;;
    -h|--help)  usage;                   ;;
    *)          shift;                   ;;
  esac
done

# step: retrieve the credentials
get_credentials
# step: set the environment file
ENVIRONMENT_FILE="./${ENVIRONMENTS_DIR}/${PLATFORM_ENV}.tfvars"

[[ -n "${PLATFORM_ENV}"          ]] || usage "you have not specified an envirnoment (either -e or set PLATFORM_ENV envirnoment variable)"
[[ -f "${ENVIRONMENT_FILE}"      ]] || usage "the environment file: '${YELLOW}${ENVIRONMENT_FILE}${NC}' does not exist"

run
